// 靜態與動態
靜態: 由設計師來做手動更改
動態: 有一個程式更改網頁內容

point : 僅需把有變化的部分用<?php ?>包起來, 變數要$開頭, echo是回傳, 可以分兩區打會比較乾淨

// 縮寫
<?php echo $a ?>
or
<?= $a ?>

// LAMP
Linus + Apache + MySQL + PHP

// 變數型態
string字串 : $string="Hello" or 'Hello' (單引號比較好)
number數字 : $number=4
timestamp時間戳記 : $x=strtotime(gmdate('Y-m-d H:i:s'))
Boolean布林值 : $yesOrNo=TRUE (0=FALSE, 1=TRUE)

// 字串
1.雙引號 "", 雙引號裡面的變數名稱會自動帶入變數的值
echo "$a" 與 echo $a, 結果是一樣的
2.單引號 ''
echo '$a' 與 echo $a, 結果不一樣
3.定界符號
$s = <<<(自己取)
Line1
Line2
(自己取)
4.字串相連是用. 數字相加是+
$firstName = "Jimmy";
$lastNane = "Lian";
$name = $firstName . $lastNane;

// 運算元
and != &&, or != || : 後面的都是如果提前成立就會提前結束

// 正式上課內容
// 呼叫 php1呼叫php2 : 把php2的內容複製到php1
notice : 盡量不要重新呼叫(變數回到原本的值 A呼叫B, B呼叫C == A呼叫C)

php1.php
<?php
    include("php2.php");

    // 系統偵測, 防止重複呼叫的問題出現
    include_once("php2.php");

    // 呼叫不存在的檔案不會有問題
    include("php3.php");
    -->Warning

    // 如果是require就一定要有東西 
    require("php3.php")
    -->ERROR
?>

php2.php
<?php
    // define : 定義常數
    define("PI",3.1415926);
    echo PI, "<br>";
?>

// gettype : 查詢變數型態(integer, double, string, boolean)
$x = 12;
echo gettype($x);
--> integer

// integer : php會自動轉換不同的進位法, 並且會盡量轉換和運算
$x = 010; //8進位 --> 8
$y = 0xa; //16進位 --> 10
$z = 2; //10進位
print $x+$y+$z;
--> 20

$x = 1;
$y = "0x10";
echo $x + $y;
--> 1

// string可以比大小, 一個一個比較, 贏了就不比了, 但是數字不一樣
"ABC" >= "AB"
"ABC" < "BA"
"123" >= "12"
"123" >= "21"

// time
$x = getdate();
echo gettype($x);
--> array 是陣列

$y = date('Y-m-d H:i:s');
echo gettype($y);
--> string 是字串

// 取消顯示Warning
先查詢: phpinfo();
修改php.ini
大約450多的地方有error_reporting = E_ALL
改成: error_reporting = E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR
470多display_errors = Off  -->  On

// 運算元順序
$x = 1;
$y = $x++;
--> $y = $x; $x++;
--> $x = 2, $y = 1

$x = 1;
$y = ++$x;
--> $x++; $y = $x;
--> $x = 2, $y = 2

// 運算元判斷式
$a = 100;
$b = ($a > 0) ? "positive" : "negative";

// && VS &
$x = 3;
if ($x >= 10 && foo())
--> 由於前面不成立, 所以後面的函式foo也不會運作
if ($x >= 10 & foo())
--> 即使前面不成立, 後面的函式foo也會運作

如果foo的運作結果會影響到, 可以寫成
if (foo() && $x >= 10)
--> foo()一定會執行一次

// &$x
// 原本
$x = 100;
$y = $x;
$x = 200;
--> x : 200, y : 100;

// 現在 : 比較偏向連動, 改一個兩個一起
$x = 100;
$y = &$x;
$x = 200;
--> x : 200, y : 200;

// unset : 清除